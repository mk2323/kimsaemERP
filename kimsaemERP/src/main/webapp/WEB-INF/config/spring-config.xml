<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />
	<resources mapping="/common/**" location="/WEB-INF/static/common/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- ==============뷰리졸버에 대한 등록================================= -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>



	<!-- ======================어노테이션============================== -->
	<context:component-scan base-package="ktds" />
	<context:component-scan base-package="batch"/>



	<!-- ==================tiles를 사용하기 위한 설정===================== -->
	<!-- 1. tiles의 설정파일의 정보를 등록 -->
	<beans:bean id="tilesConfigurer"
	 class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<!-- <beans:list>
				<beans:value>/WEB-INF/config/main-tiles.xml</beans:value>
			</beans:list> -->
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 2. ViewResolver가 기본 jsp로 뷰를 생성하지 않고 tiles프레임워크를 통해서 뷰를 생성할 수 있도록 뷰리졸버를 
		등록 -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>
	<!-- ==================db관련작업============================ -->
	<beans:bean id="ds"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="ds" />
	</beans:bean>
	
	<!-- ==================mybatis연결========================== -->
	<!-- spring과 mybatis를 연결해주는 클래스 -->
	<beans:bean id="sqlSessionFactory"
			class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds"/>
		<beans:property name="configLocation"
			value="/WEB-INF/config/mybatis-config.xml"/>
	</beans:bean>
	
	<!-- mybatis의 핵심클래스(spring jdbc에서 JdbcTemplate의 역할을 하는 클래스) -->
	<beans:bean id="sqlSession"	
			class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>
	<!-- ======================파일업로드============================ -->
	<beans:bean id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="4000000"/>	
	</beans:bean>
	<!-- ===========인터셉터를 등록================================= -->
	<!-- <interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean class="advanced.TimeCheckInterceptor"/>
		</interceptor>
		<interceptor>			
			<mapping path="/emp/**"/>
			<mapping path="/board/**"/>
			<mapping path="/menu/job.do"/>
			<exclude-mapping path="/emp/login.do"/>
			<exclude-mapping path="/board/ajax_boardlist.do"/>
			<beans:bean class="ktds.erp.emp.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors> -->
	
	<!-- aop를 이용한 선언적 트랜잭션 처리 -->
	<!--1.트랜잭션처리를 위해 제공하는 클래스를 등록  -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="ds"/>
	
	</beans:bean>
	
	<!-- 2.advice로 등록 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
	 <tx:attributes>
	 	<tx:method name="insert" rollback-for="Exception"/>
	 </tx:attributes>	
	</tx:advice>
	<!-- 3.aop처리 -->
	<aop:config>
		<aop:pointcut expression="execution(* ktds.erp.board.BoardServiceImpl.insert(..))" 
		id="txpointcut"/>
		<aop:advisor advice-ref="transactionAdvice"
		 pointcut-ref="txpointcut"/>
	
	</aop:config>
	
	<!-- validator 등록 -->
	<beans:bean id="localValidator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
</beans:beans>




